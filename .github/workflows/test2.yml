name: CI
on:
  push:
    branches:
      - main

jobs:
  Build:
    name: Prepare(Build,UnitTest)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
          
      - name: Get short SHA
        id: s_sha
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 1.8
          
      #build
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        id: build_gradle
        run: ./gradlew build -x test -x check

      - name: Notify slack build success
        if: ${{ always() && steps.build_gradle.outcome == 'success' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack_build.outputs.message_id }}
          channel: github_action
          status: BUILD SUCCESS commit:${{ steps.s_sha.outputs.sha8 }}
          color: good

      - name: Notify slack build failed
        if: ${{ always() && steps.build_gradle.outcome == 'failure' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack_build.outputs.message_id }}
          channel: github_action
          status: BUILD FAILED commit:${{ steps.s_sha.outputs.sha8 }}
          color: danger

      - name: Make Batch File
        run: echo 'java -jar "%~dp0app.jar"' > build/libs/app.bat

      - name: Deploy Excutable JAR
        uses: actions/upload-artifact@v2
        with:
          name: ctip-app
          path: '**/build/libs/*.*'
          
      #Unit Test
      - name: Unit Test
        id: unit_test
        run: ./gradlew test -x jacocoTestReport

      - name: Notify slack test success
        if: ${{ always() && steps.unit_test.outcome == 'success' }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack_test.outputs.message_id }}
          channel: github_action
          status: UNIT TEST SUCCESS commit:${{ steps.s_sha.outputs.sha8 }}
          color: good

      - name: Notify slack test failed
        if: ${{always() && steps.unit_test.outcome == 'failure'}}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack_test.outputs.message_id }}
          channel: github_action
          status: UNIT TEST FAILED commit:${{ steps.s_sha.outputs.sha8 }}
          color: danger
          
      - name: Deploy Test Report
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ always() }}
        with:
          external_repository: Jionee/software_hugo
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: build/reports/tests/test
          destination_dir: junit
          
      - name: Publish Test Report Summary
        uses: mikepenz/action-junit-report@v2
        if: ${{ always() }}
        with:
          report_paths: '**/build/test-results/test/TEST-*.xml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      #Jacoco
      - name: Test Code Coverage
        id: code_coverage
        run: ./gradlew jacocoTestReport jacocoTestCoverageVerification
        
      - name: Deploy Code Coverage Report
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: Jionee/software_hugo
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: build/reports/jacoco/test/html
          destination_dir: jacoco

      


  Analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 11  # Minimum JDK version for SonarQube
        uses: actions/setup-java@v1.4.3
        with:
          java-version: 11
          
      #checkstyle
      - name: Run Checkstyle
        uses: nikitasavinov/checkstyle-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: 'github-pr-check'
          tool_name: 'Lint'
          
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]
          run: npm install --save-dev eslint
          
      - name: Deploy Checkstyle with reviewdog
        run: eslint -f checkstyle . | reviewdog -f=checkstyle -name="eslint" -reporter=github-pr-check
        
#       - name: Deploy Checkstyle xml
#         run: <linter> | <convert-to-checkstyle> | reviewdog -f=checkstyle -name="<linter>" -reporter=github-pr-check

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      #sonarcloud
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle

      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube --info
      
      #PMD
      - name: Run PMD
        run: ./gradlew pmdMain pmdTest

      - name: Deploy PMD Report
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: Jionee/software_hugo
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: build/reports/pmd
          destination_dir: pmd
        

      # Spotbugs
      - name: Run Spotbugs
        run: ./gradlew spotbugsMain spotbugsTest --stacktrace

      - name: Deploy Spotbugs Report
        uses: peaceiris/actions-gh-pages@v3
        with:
          external_repository: Jionee/software_hugo
          personal_token: ${{ secrets.PERSONAL_TOKEN }}
          publish_dir: build/reports/spotbugs
          destination_dir: spotbugs
          
      - name: Get short SHA
        id: s_sha_static
        run: echo "::set-output name=sha8::$(echo ${GITHUB_SHA} | cut -c1-8)"
        
#       #codeCov 활용
#       - name: Test with Gradle
#         run: ./gradlew test
#       - name: Upload coverage to Codecov
#         uses: codecov/codecov-action@v1
#         with:
#             token: ${{ secrets.CODECOV_TOKEN }}
#             file: ./build/reports/jacoco/test/jacocoTestReport.xml
            
        

