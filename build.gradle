plugins {
    id 'java'
    id "jacoco"
    id "application"
    id "org.sonarqube" version "3.1.1"
    id "pmd"
    id "checkstyle"
    id "com.github.spotbugs" version "4.7.0"
}

group 'org.example'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

}

sonarqube {
    properties {
        property "sonar.projectKey", "VnV-Test_Software_VnV"
        property "sonar.organization", "vnv-test"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}


jacoco {
    toolVersion = "0.8.6"
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/core/Main.*')
        }))
    }

    dependsOn test

    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/core/Main.*')
        }))
    }

    violationRules {
        rule {
            limit {
                minimum = 0.8
            }
        }
    }
}

test {
    useJUnitPlatform()
    
    finalizedBy jacocoTestReport

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
        excludes += ['**/core/Main.*']
    }
}

jar {
    manifest {
        attributes 'Title': 'app-result', 'Version': '0.1.0', 'Main-Class': 'core.Main'
    }
    archiveName 'app.jar'
    dependsOn configurations.runtime
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

checkstyle {
    ignoreFailures = true // 분석결과 예외가 발생하면 빌드실패 발생시키는 것을 제외
    //configFile = file("config/checkstyle.xml") // 1.1.2 에서 작성한 checkstyle 파일 지정
    reportsDir = file("${buildDir}/checkstyle-output") // 리포트 파일이 위치할 디렉토리 지정
}

checkstyleMain {
    reports {
        xml.destination = file("${checkstyle.reportsDir}/checkstyle-report.xml") // 리포트 파일의 위치 및 파일명 지정
    }
}

pmd {
    ignoreFailures = true // 분석결과 예외가 발생하면 빌드실패 발생시키는 것을 제외
    //reportsDir = file("${buildDir}/pmd-output")
}

//pmdMain {
//    reports {
//        xml.destination = file("${pmd.reportsDir}/pmd-report.xml")
//        xml.enabled = true
//    }
//}

spotbugsMain {
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}



